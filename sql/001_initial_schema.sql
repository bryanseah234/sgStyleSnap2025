-- Migration 001: Initial Schema
-- This file is re-runnable - safe to execute multiple times

-- ============================================
-- DROP EXISTING OBJECTS (in reverse dependency order)
-- ============================================
DROP TRIGGER IF EXISTS update_users_updated_at ON users CASCADE;
DROP TRIGGER IF EXISTS update_clothes_updated_at ON clothes CASCADE;
DROP TRIGGER IF EXISTS update_friends_updated_at ON friends CASCADE;
DROP TRIGGER IF EXISTS update_suggestions_updated_at ON suggestions CASCADE;

DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;

DROP TABLE IF EXISTS suggestions CASCADE;
DROP TABLE IF EXISTS friends CASCADE;
DROP TABLE IF EXISTS clothes CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- ============================================
-- EXTENSIONS
-- ============================================
-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "pg_trgm"; -- Trigram for fuzzy text search (friend search)

-- ============================================
-- AUTHENTICATION INTEGRATION
-- ============================================
-- CRITICAL: Google OAuth 2.0 (SSO) ONLY
-- This schema integrates with Supabase Auth using Google OAuth exclusively.
-- The users.id should match auth.users.id for RLS policies to work correctly.
-- 
-- Authentication Flow:
--   1. User clicks "Sign in with Google" on /login or /register page
--   2. Supabase Auth redirects to Google OAuth consent screen
--   3. User authorizes app, Google redirects back to Supabase
--   4. Supabase Auth creates entry in auth.users (if new user)
--   5. Trigger/function creates corresponding entry in public.users
--   6. User redirected to /closet (home page)
--   7. RLS policies use auth.uid() which returns authenticated user's UUID
-- 
-- No email/password, magic links, or other auth methods supported.
-- ============================================

-- Users table
-- Profile Photo System:
--   - 6 default avatar options stored in /public/avatars/default-1.png through default-6.png
--   - avatar_url stores either: default avatar path OR Google profile photo URL
--   - Future: Can be extended to support custom uploaded avatars via Cloudinary
-- Username Rules:
--   - username: Auto-generated from email (part before @), cannot be changed by user
--   - name: Full name from Google OAuth (first + last name), cannot be changed
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(255) NOT NULL, -- Auto-generated from email (before @), immutable
    name VARCHAR(255), -- Full name from Google OAuth (first + last name), immutable
    avatar_url TEXT, -- Path to default avatar OR Google photo URL OR future custom upload
    google_id VARCHAR(255) UNIQUE, -- OAuth provider ID from Google
    removed_at TIMESTAMP WITH TIME ZONE, -- Soft delete support for users
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Clothes table
-- NOTES:
--   - image_url: Full resolution image from Cloudinary (max 1080px after client-side resize)
--   - thumbnail_url: Auto-generated by Cloudinary transformations (e.g., c_thumb,w_300,h_300)
--   - removed_at: Soft delete field, items recoverable for 30 days
CREATE TABLE clothes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    owner_id UUID REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(50) CHECK (category IN ('top', 'bottom', 'outerwear', 'shoes', 'accessory')),
    image_url TEXT NOT NULL,
    thumbnail_url TEXT, -- Auto-generated thumbnail URL (Cloudinary transformation)
    style_tags TEXT[],
    privacy VARCHAR(20) DEFAULT 'friends' CHECK (privacy IN ('private', 'friends')),
    size VARCHAR(20),
    brand VARCHAR(100),
    is_favorite BOOLEAN DEFAULT false, -- User can mark items as favorite for quick access
    removed_at TIMESTAMP WITH TIME ZONE, -- Soft delete: items retained for 30-day recovery period
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Friends table
-- IMPORTANT: Uses canonical ordering (requester_id < receiver_id) to prevent duplicate rows
-- Friendship states: pending (request sent), accepted (friends), rejected (declined)
CREATE TABLE friends (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  requester_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  receiver_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  status TEXT NOT NULL CHECK (status IN ('pending', 'accepted', 'rejected')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  UNIQUE(requester_id, receiver_id),
  CHECK (requester_id < receiver_id) -- Enforce canonical ordering to prevent duplicate friendships
);

-- Index for faster queries on user's clothes
CREATE INDEX idx_clothes_owner ON clothes(owner_id);
CREATE INDEX idx_clothes_category ON clothes(category);
CREATE INDEX idx_clothes_favorite ON clothes(owner_id, is_favorite) WHERE is_favorite = true;

-- Note: Email index intentionally omitted from public queries to prevent enumeration
-- Email searches use exact match only (email = ?) without exposing results

-- Suggestions table
CREATE TABLE suggestions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  from_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  to_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  suggested_item_ids UUID[] NOT NULL,
  message TEXT CHECK (char_length(message) <= 100), -- Max 100 chars as per API spec
  is_read BOOLEAN DEFAULT false,
  viewed_at TIMESTAMP WITH TIME ZONE, -- Track when suggestion was read
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  CONSTRAINT check_item_ids_not_empty CHECK (array_length(suggested_item_ids, 1) > 0),
  CONSTRAINT check_max_items CHECK (array_length(suggested_item_ids, 1) <= 10) -- Max 10 items per suggestion
);

-- Future feature: likes/reactions
-- MOVED TO FUTURE MIGRATION: This table is not part of MVP
-- Uncomment and migrate when implementing likes feature
-- CREATE TABLE likes (
--   id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--   user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
--   item_id UUID NOT NULL REFERENCES clothes(id) ON DELETE CASCADE,
--   created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
--   UNIQUE(user_id, item_id)
-- );

-- ============================================
-- TRIGGERS: Automatic updated_at management
-- ============================================

-- Function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply updated_at trigger to all tables
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_clothes_updated_at
    BEFORE UPDATE ON clothes
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_friends_updated_at
    BEFORE UPDATE ON friends
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_suggestions_updated_at
    BEFORE UPDATE ON suggestions
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();