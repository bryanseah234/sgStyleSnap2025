# StyleSnap - Vercel Deployment
# Automatically deploys to Vercel on push to main or pull requests

name: Deploy to Vercel

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then echo "::error::Missing VERCEL_TOKEN secret"; exit 1; fi
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then echo "::error::Missing VERCEL_ORG_ID secret"; exit 1; fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then echo "::error::Missing VERCEL_PROJECT_ID secret"; exit 1; fi
          if [ -z "${{ secrets.VITE_SUPABASE_URL }}" ]; then echo "::error::Missing VITE_SUPABASE_URL secret"; exit 1; fi
          if [ -z "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then echo "::error::Missing VITE_SUPABASE_ANON_KEY secret"; exit 1; fi
      
      - name: Pull Vercel Env (Preview)
        if: github.event_name == 'pull_request'
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull Vercel Env (Production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts (Preview)
        if: github.event_name == 'pull_request'
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_CLOUDINARY_CLOUD_NAME: ${{ secrets.VITE_CLOUDINARY_CLOUD_NAME }}
          VITE_CLOUDINARY_UPLOAD_PRESET: ${{ secrets.VITE_CLOUDINARY_UPLOAD_PRESET }}
          VITE_OPENWEATHER_API_KEY: ${{ secrets.VITE_OPENWEATHER_API_KEY }}
      
      - name: Build Project Artifacts (Production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_CLOUDINARY_CLOUD_NAME: ${{ secrets.VITE_CLOUDINARY_CLOUD_NAME }}
          VITE_CLOUDINARY_UPLOAD_PRESET: ${{ secrets.VITE_CLOUDINARY_UPLOAD_PRESET }}
          VITE_OPENWEATHER_API_KEY: ${{ secrets.VITE_OPENWEATHER_API_KEY }}
      
      - name: Deploy to Vercel (Preview)
        if: github.event_name == 'pull_request'
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel (Production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deployment Complete
        run: echo "✅ Deployment to Vercel completed successfully!"

# Required GitHub Secrets:
# - VERCEL_TOKEN: Your Vercel authentication token
# - VERCEL_ORG_ID: Your Vercel organization ID
# - VERCEL_PROJECT_ID: Your Vercel project ID
# - VITE_SUPABASE_URL: Supabase project URL
# - VITE_SUPABASE_ANON_KEY: Supabase anon key
# - VITE_CLOUDINARY_CLOUD_NAME: Cloudinary cloud name
# - VITE_CLOUDINARY_UPLOAD_PRESET: Cloudinary upload preset
# - VITE_OPENWEATHER_API_KEY: OpenWeatherMap API key
#
# To get these values:
# 1. Vercel Token: https://vercel.com/account/tokens
# 2. Vercel IDs: Run `vercel link` in your project, then check .vercel/project.json
# 3. Add all secrets in GitHub: Settings → Secrets and variables → Actions → New repository secret
